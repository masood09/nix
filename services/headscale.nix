{
  config,
  lib,
  inputs,
  pkgs,
  ...
}: let
  domain = "mantannest.com";
  headscaleDomain = "headscale.${domain}";
  authDomain = "auth.${domain}";

  pkgs-unstable = import inputs.nixpkgs-unstable {
    inherit (pkgs) system;
  };
in {
  options.services.headscale = {
    adminUser = lib.mkOption {
      type = lib.types.str;
      default = "admin";
      description = "Username for the headscale admin user";
    };
  };

  config = let
    inherit (config.services.headscale) adminUser;

    aclConfig = {
      # Groups definition
      groups = {
        "group:admins" = [adminUser];
      };

      acls = [
        # Allow all connections within the tailnet
        {
          action = "accept";
          src = ["*"];
          dst = ["*:*"];
        }
        # Allow admin to connect to their own services
        {
          action = "accept";
          src = [adminUser];
          dst = ["${adminUser}:*"];
        }
      ];

      # Auto-approvers section for routes
      autoApprovers = {
        routes = {
          "0.0.0.0/0" = [adminUser];
          "10.0.0.0/16" = [adminUser];
          "172.16.0.0/24" = [adminUser];
        };

        exitNode = [adminUser];
      };
    };

    # Convert to HuJSON format with comments
    aclHuJson = ''
      // Headscale ACL Policy - Generated by NixOS
      // Admin user: ${adminUser}

      ${builtins.toJSON aclConfig}
    '';

    aclFile = pkgs.writeText "acl-policy.hujson" aclHuJson;
  in {
    sops.secrets = {
      "headscale-authentik-client-secret" = {
        owner = "headscale";
        mode = "0400";
      };

      "restic-env-file" = {};
      "restic-oci-repo" = {};
      "restic-encrypt-password" = {};
    };

    services = {
      headscale = {
        package = pkgs-unstable.headscale;
        enable = true;
        adminUser = "admin";
        port = 3009;
        settings = {
          dns = {
            base_domain = "dns.headscale.mantannest.com";
          };

          logtail.enabled = false;

          oidc = {
            only_start_if_oidc_is_available = true;
            issuer = "https://${authDomain}/application/o/headscale/";
            client_id = "Pjad107mj4JsZRnmbTMzbGiNqIolCMFn2jF3dBeA";
            client_secret_path = config.sops.secrets."headscale-authentik-client-secret".path;

            scope = [
              "openid"
              "profile"
              "email"
              "custom"
            ];

            pkce = {
              enabled = true;
              method = "S256";
            };

            strip_email_domain = true;
          };

          policy.path = aclFile;
          server_url = "https://${headscaleDomain}";
        };
      };
    };

    services = {
      nginx = {
        enable = true;
        virtualHosts."${headscaleDomain}" = {
          forceSSL = true;
          enableACME = true;
          locations."/" = {
            proxyPass = "http://127.0.0.1:3009";
            proxyWebsockets = true;
            extraConfig = ''
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection $connection_upgrade;
              proxy_set_header Host $host;
              proxy_buffering off;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              add_header Strict-Transport-Security "max-age=15552000; includeSubDomains" always;
            '';
          };
        };
      };

      restic.backups.headscale = {
        initialize = true;
        environmentFile = config.sops.secrets."restic-env-file".path;
        repositoryFile = config.sops.secrets."restic-oci-repo".path;
        passwordFile = config.sops.secrets."restic-encrypt-password".path;

        paths = [
          "/var/lib/headscale"
        ];

        pruneOpts = [
          "--keep-daily 24"
          "--keep-weekly 7"
          "--keep-monthly 30"
          "--keep-yearly 12"
        ];

        timerConfig = {
          OnCalendar = "*-*-* *:30:00";
          Persistent = true;
        };
      };
    };

    environment.persistence."/nix/persist" = {
      directories = [
        "/var/lib/headscale/"
      ];
    };
  };
}
